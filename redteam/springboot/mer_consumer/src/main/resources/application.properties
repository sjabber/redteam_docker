spring.main.web-application-type=none

#DB 연동
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=postgres
spring.datasource.driverClassName=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:postgresql://${DB_HOST}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PW}
spring.datasource.maximumPoolSize=5
spring.datasource.hikari.max-lifetime=30000

#JPA 설정
#Dialect 설정

#하이버네이트가 실행하는 모든 SQL문을 콘솔로 출력해 준다.
spring.jpa.properties.hibernate.show_sql=true
#콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현한다.
spring.jpa.properties.hibernate.format_sql=true
#디버깅이 용이하도록 SQL문 이외에 추가적인 정보를 출력해 준다.
spring.jpa.properties.hibernate.use_sql_comments=true
#camel 형식을 _형식으로 변환
#spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#log 설정

#log 설정
logging.level.org.springframework.web=debug
logging.level.sql=error

# hibernate에서 생성하는 SQL 로그 끄기
logging.level.org.hibernate.SQL=off

logging.level.jdbc=error
logging.level.jdbc.sqlonly=debug

#max-history 설정 안하면 디폴트가 30이라 30일 이후의 로그는 자동 삭제된다. 필수로 해야함.
logging.file.max-history=7
#logging.file.max-size=10MB
logging.file.name=./logs/spring.log

#  로그 패턴 설정
logging.pattern.console=%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n
logging.pattern.file= %-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n


#kafka 설정
#spring.kafka.bootstrap-servers = 52.231.73.1:9092
spring.kafka.bootstrap-servers = ${KAFKA_HOSTNAME}:${KAFKA_PORT}

#kafka consumer
#spring.kafka.consumer.auto-offset-reset = latest
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages = *

#변수 설정
Key = ${TOKEN_SECRET}
AESiv = ${AES_IV}